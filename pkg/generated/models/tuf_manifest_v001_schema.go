// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright 2021 The Sigstore Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TufManifestV001Schema tuf targets payload v0.0.1 Schema
//
// Schema for tuf manifests
//
// swagger:model tufManifestV001Schema
type TufManifestV001Schema struct {

	// Type identifier
	// Enum: [root targets snapshot timestamp]
	Type string `json:"_type,omitempty"`

	// Expiration date
	Expires string `json:"expires,omitempty"`

	// signed
	// Required: true
	Signed *TufManifestV001SchemaSigned `json:"signed"`

	// File version
	Version int64 `json:"version,omitempty"`
}

// Validate validates this tuf manifest v001 schema
func (m *TufManifestV001Schema) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSigned(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var tufManifestV001SchemaTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["root","targets","snapshot","timestamp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tufManifestV001SchemaTypeTypePropEnum = append(tufManifestV001SchemaTypeTypePropEnum, v)
	}
}

const (

	// TufManifestV001SchemaTypeRoot captures enum value "root"
	TufManifestV001SchemaTypeRoot string = "root"

	// TufManifestV001SchemaTypeTargets captures enum value "targets"
	TufManifestV001SchemaTypeTargets string = "targets"

	// TufManifestV001SchemaTypeSnapshot captures enum value "snapshot"
	TufManifestV001SchemaTypeSnapshot string = "snapshot"

	// TufManifestV001SchemaTypeTimestamp captures enum value "timestamp"
	TufManifestV001SchemaTypeTimestamp string = "timestamp"
)

// prop value enum
func (m *TufManifestV001Schema) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tufManifestV001SchemaTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TufManifestV001Schema) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("_type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *TufManifestV001Schema) validateSigned(formats strfmt.Registry) error {

	if err := validate.Required("signed", "body", m.Signed); err != nil {
		return err
	}

	if m.Signed != nil {
		if err := m.Signed.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signed")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this tuf manifest v001 schema based on the context it is used
func (m *TufManifestV001Schema) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSigned(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TufManifestV001Schema) contextValidateSigned(ctx context.Context, formats strfmt.Registry) error {

	if m.Signed != nil {
		if err := m.Signed.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signed")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TufManifestV001Schema) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TufManifestV001Schema) UnmarshalBinary(b []byte) error {
	var res TufManifestV001Schema
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TufManifestV001SchemaSigned Content of the signed manifest
//
// swagger:model TufManifestV001SchemaSigned
type TufManifestV001SchemaSigned struct {

	// Specifies the archive inline within the document
	// Format: byte
	Content strfmt.Base64 `json:"content,omitempty"`

	// Specifies the location of the archive; if this is specified, a hash value must also be provided
	// Format: uri
	URL strfmt.URI `json:"url,omitempty"`
}

// Validate validates this tuf manifest v001 schema signed
func (m *TufManifestV001SchemaSigned) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TufManifestV001SchemaSigned) validateURL(formats strfmt.Registry) error {
	if swag.IsZero(m.URL) { // not required
		return nil
	}

	if err := validate.FormatOf("signed"+"."+"url", "body", "uri", m.URL.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this tuf manifest v001 schema signed based on context it is used
func (m *TufManifestV001SchemaSigned) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TufManifestV001SchemaSigned) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TufManifestV001SchemaSigned) UnmarshalBinary(b []byte) error {
	var res TufManifestV001SchemaSigned
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
