// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright 2021 The Sigstore Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TufTargetsV001Schema tuf targets payload v0.0.1 Schema
//
// Schema for tuf targets payload
//
// swagger:model tufTargetsV001Schema
type TufTargetsV001Schema struct {

	// Type identifier
	// Required: true
	// Enum: [targets]
	Type *string `json:"_type"`

	// Expiration date
	Expires string `json:"expires,omitempty"`

	// TUF Specification version
	// Required: true
	// Enum: [1.0.0]
	SpecVersion *string `json:"specVersion"`

	// targets
	// Required: true
	Targets *TufTargetsV001SchemaTargets `json:"targets"`

	// File version
	// Required: true
	Version *int64 `json:"version"`
}

// Validate validates this tuf targets v001 schema
func (m *TufTargetsV001Schema) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpecVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var tufTargetsV001SchemaTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["targets"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tufTargetsV001SchemaTypeTypePropEnum = append(tufTargetsV001SchemaTypeTypePropEnum, v)
	}
}

const (

	// TufTargetsV001SchemaTypeTargets captures enum value "targets"
	TufTargetsV001SchemaTypeTargets string = "targets"
)

// prop value enum
func (m *TufTargetsV001Schema) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tufTargetsV001SchemaTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TufTargetsV001Schema) validateType(formats strfmt.Registry) error {

	if err := validate.Required("_type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("_type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

var tufTargetsV001SchemaTypeSpecVersionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["1.0.0"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tufTargetsV001SchemaTypeSpecVersionPropEnum = append(tufTargetsV001SchemaTypeSpecVersionPropEnum, v)
	}
}

const (

	// TufTargetsV001SchemaSpecVersionNr1Dot0Dot0 captures enum value "1.0.0"
	TufTargetsV001SchemaSpecVersionNr1Dot0Dot0 string = "1.0.0"
)

// prop value enum
func (m *TufTargetsV001Schema) validateSpecVersionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tufTargetsV001SchemaTypeSpecVersionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TufTargetsV001Schema) validateSpecVersion(formats strfmt.Registry) error {

	if err := validate.Required("specVersion", "body", m.SpecVersion); err != nil {
		return err
	}

	// value enum
	if err := m.validateSpecVersionEnum("specVersion", "body", *m.SpecVersion); err != nil {
		return err
	}

	return nil
}

func (m *TufTargetsV001Schema) validateTargets(formats strfmt.Registry) error {

	if err := validate.Required("targets", "body", m.Targets); err != nil {
		return err
	}

	if m.Targets != nil {
		if err := m.Targets.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targets")
			}
			return err
		}
	}

	return nil
}

func (m *TufTargetsV001Schema) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this tuf targets v001 schema based on the context it is used
func (m *TufTargetsV001Schema) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTargets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TufTargetsV001Schema) contextValidateTargets(ctx context.Context, formats strfmt.Registry) error {

	if m.Targets != nil {
		if err := m.Targets.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targets")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TufTargetsV001Schema) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TufTargetsV001Schema) UnmarshalBinary(b []byte) error {
	var res TufTargetsV001Schema
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TufTargetsV001SchemaTargets tuf targets v001 schema targets
//
// swagger:model TufTargetsV001SchemaTargets
type TufTargetsV001SchemaTargets struct {

	// The identifier of this artifact
	URI string `json:"URI,omitempty"`

	// hash
	Hash *TufTargetsV001SchemaTargetsHash `json:"hash,omitempty"`

	// length
	Length int64 `json:"length,omitempty"`
}

// Validate validates this tuf targets v001 schema targets
func (m *TufTargetsV001SchemaTargets) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHash(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TufTargetsV001SchemaTargets) validateHash(formats strfmt.Registry) error {
	if swag.IsZero(m.Hash) { // not required
		return nil
	}

	if m.Hash != nil {
		if err := m.Hash.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targets" + "." + "hash")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this tuf targets v001 schema targets based on the context it is used
func (m *TufTargetsV001SchemaTargets) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHash(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TufTargetsV001SchemaTargets) contextValidateHash(ctx context.Context, formats strfmt.Registry) error {

	if m.Hash != nil {
		if err := m.Hash.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targets" + "." + "hash")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TufTargetsV001SchemaTargets) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TufTargetsV001SchemaTargets) UnmarshalBinary(b []byte) error {
	var res TufTargetsV001SchemaTargets
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TufTargetsV001SchemaTargetsHash tuf targets v001 schema targets hash
//
// swagger:model TufTargetsV001SchemaTargetsHash
type TufTargetsV001SchemaTargetsHash struct {

	// The hashing function used to compute the hash value
	// Required: true
	// Enum: [sha256]
	Algorithm *string `json:"algorithm"`

	// The hash value for the package
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this tuf targets v001 schema targets hash
func (m *TufTargetsV001SchemaTargetsHash) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlgorithm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var tufTargetsV001SchemaTargetsHashTypeAlgorithmPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["sha256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tufTargetsV001SchemaTargetsHashTypeAlgorithmPropEnum = append(tufTargetsV001SchemaTargetsHashTypeAlgorithmPropEnum, v)
	}
}

const (

	// TufTargetsV001SchemaTargetsHashAlgorithmSha256 captures enum value "sha256"
	TufTargetsV001SchemaTargetsHashAlgorithmSha256 string = "sha256"
)

// prop value enum
func (m *TufTargetsV001SchemaTargetsHash) validateAlgorithmEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tufTargetsV001SchemaTargetsHashTypeAlgorithmPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TufTargetsV001SchemaTargetsHash) validateAlgorithm(formats strfmt.Registry) error {

	if err := validate.Required("targets"+"."+"hash"+"."+"algorithm", "body", m.Algorithm); err != nil {
		return err
	}

	// value enum
	if err := m.validateAlgorithmEnum("targets"+"."+"hash"+"."+"algorithm", "body", *m.Algorithm); err != nil {
		return err
	}

	return nil
}

func (m *TufTargetsV001SchemaTargetsHash) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("targets"+"."+"hash"+"."+"value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this tuf targets v001 schema targets hash based on context it is used
func (m *TufTargetsV001SchemaTargetsHash) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TufTargetsV001SchemaTargetsHash) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TufTargetsV001SchemaTargetsHash) UnmarshalBinary(b []byte) error {
	var res TufTargetsV001SchemaTargetsHash
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
