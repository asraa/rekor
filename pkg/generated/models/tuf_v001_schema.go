// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright 2021 The Sigstore Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TUFV001Schema TUF v0.0.1 Schema
//
// Schema for TUF metadata entries
//
// swagger:model tufV001Schema
type TUFV001Schema struct {

	// Arbitrary content to be included in the verifiable entry in the transparency log
	ExtraData interface{} `json:"extraData,omitempty"`

	// TUF metadata
	// Required: true
	Metadata interface{} `json:"metadata"`

	// root metadata containing about the public keys used to sign the manifest
	// Required: true
	Root interface{} `json:"root"`

	// TUF specification version
	// Read Only: true
	SpecVersion string `json:"spec_version,omitempty"`
}

// Validate validates this tuf v001 schema
func (m *TUFV001Schema) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoot(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TUFV001Schema) validateMetadata(formats strfmt.Registry) error {

	if m.Metadata == nil {
		return errors.Required("metadata", "body", nil)
	}

	return nil
}

func (m *TUFV001Schema) validateRoot(formats strfmt.Registry) error {

	if m.Root == nil {
		return errors.Required("root", "body", nil)
	}

	return nil
}

// ContextValidate validate this tuf v001 schema based on the context it is used
func (m *TUFV001Schema) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSpecVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TUFV001Schema) contextValidateSpecVersion(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "spec_version", "body", string(m.SpecVersion)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TUFV001Schema) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TUFV001Schema) UnmarshalBinary(b []byte) error {
	var res TUFV001Schema
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
