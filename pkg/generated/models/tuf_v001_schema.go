// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright 2021 The Sigstore Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TufV001Schema tuf v0.0.1 Schema
//
// Schema for tuf metadata entries
//
// swagger:model tufV001Schema
type TufV001Schema struct {

	// Arbitrary content to be included in the verifiable entry in the transparency log
	ExtraData interface{} `json:"extraData,omitempty"`

	// manifest
	// Required: true
	Manifest *TufManifestV001Schema `json:"manifest"`

	// root
	Root *TufManifestV001Schema `json:"root,omitempty"`

	// TUF specification version
	// Enum: [1.0.0]
	Version string `json:"version,omitempty"`
}

// Validate validates this tuf v001 schema
func (m *TufV001Schema) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateManifest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TufV001Schema) validateManifest(formats strfmt.Registry) error {

	if err := validate.Required("manifest", "body", m.Manifest); err != nil {
		return err
	}

	if m.Manifest != nil {
		if err := m.Manifest.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("manifest")
			}
			return err
		}
	}

	return nil
}

func (m *TufV001Schema) validateRoot(formats strfmt.Registry) error {
	if swag.IsZero(m.Root) { // not required
		return nil
	}

	if m.Root != nil {
		if err := m.Root.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("root")
			}
			return err
		}
	}

	return nil
}

var tufV001SchemaTypeVersionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["1.0.0"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tufV001SchemaTypeVersionPropEnum = append(tufV001SchemaTypeVersionPropEnum, v)
	}
}

const (

	// TufV001SchemaVersionNr1Dot0Dot0 captures enum value "1.0.0"
	TufV001SchemaVersionNr1Dot0Dot0 string = "1.0.0"
)

// prop value enum
func (m *TufV001Schema) validateVersionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tufV001SchemaTypeVersionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TufV001Schema) validateVersion(formats strfmt.Registry) error {
	if swag.IsZero(m.Version) { // not required
		return nil
	}

	// value enum
	if err := m.validateVersionEnum("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this tuf v001 schema based on the context it is used
func (m *TufV001Schema) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateManifest(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRoot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TufV001Schema) contextValidateManifest(ctx context.Context, formats strfmt.Registry) error {

	if m.Manifest != nil {
		if err := m.Manifest.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("manifest")
			}
			return err
		}
	}

	return nil
}

func (m *TufV001Schema) contextValidateRoot(ctx context.Context, formats strfmt.Registry) error {

	if m.Root != nil {
		if err := m.Root.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("root")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TufV001Schema) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TufV001Schema) UnmarshalBinary(b []byte) error {
	var res TufV001Schema
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
